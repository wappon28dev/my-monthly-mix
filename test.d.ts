/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/connect": {
    /**
     * The OAuth2 authorization endpoint. Your app redirects a user to this endpoint, allowing them to delegate access to their account.
     * @description <h3>Security Advice</h3>
     * * Using the [implicit OAuth authorization flow](https://tools.ietf.org/html/draft-ietf-oauth-security-topics-16#section-2.1.2) (`response_type=token`)  is **not recommended**. It can suffer from access token leakage and access token replay attacks. Use `response_type=code` instead.
     * * Use the `state` parameter for [CSRF protection](https://tools.ietf.org/html/draft-ietf-oauth-security-topics-16#section-4.7). Pass a sufficient  random nonce here and verify this nonce again after retrieving the token.
     */
    get: {
      parameters: {
        query: {
          client_id: components["parameters"]["client_id"];
          redirect_uri: components["parameters"]["redirect_uri"];
          response_type: components["parameters"]["response_type"];
          scope: components["parameters"]["scope"];
          state?: components["parameters"]["state"];
        };
      };
      responses: {
        302: components["responses"]["FoundHtml"];
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/oauth2/token": {
    /** This endpoint accepts POST requests and is used to provision access tokens once a user has authorized your application. */
    post: {
      requestBody?: {
        content: {
          "application/x-www-form-urlencoded": components["schemas"]["AuthorizationCode"] | components["schemas"]["RefreshToken"] | components["schemas"]["Password"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json; charset=utf-8": unknown;
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/me": {
    /** Returns the authenticated user’s information. */
    get: {
      responses: {
        200: components["responses"]["CompleteUser"];
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/me/activities": {
    /** Returns the authenticated user's activities. */
    get: {
      parameters: {
        query?: {
          access?: components["parameters"]["access"];
          limit?: components["parameters"]["limit"];
        };
      };
      responses: {
        200: components["responses"]["Activities"];
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/me/activities/all/own": {
    /** Recent the authenticated user's activities. */
    get: {
      parameters: {
        query?: {
          access?: components["parameters"]["access"];
          limit?: components["parameters"]["limit"];
        };
      };
      responses: {
        200: components["responses"]["Activities"];
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/me/activities/tracks": {
    /** Returns the authenticated user's recent track related activities. */
    get: {
      parameters: {
        query?: {
          access?: components["parameters"]["access"];
          limit?: components["parameters"]["limit"];
        };
      };
      responses: {
        200: components["responses"]["Activities"];
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/me/connections": {
    /** Returns a list of the authenticated user's connected social accounts. */
    get: {
      parameters: {
        query?: {
          limit?: components["parameters"]["limit"];
          offset?: components["parameters"]["offset"];
        };
      };
      responses: {
        200: components["responses"]["Connections"];
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/me/connections/{connection_id}": {
    /** Returns the authenticated user's connected social account. */
    get: {
      parameters: {
        path: {
          connection_id: components["parameters"]["connection_id"];
        };
      };
      responses: {
        200: components["responses"]["Connection"];
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/me/likes/tracks": {
    /** Returns a list of favorited or liked tracks of the authenticated user. */
    get: {
      parameters: {
        query?: {
          limit?: components["parameters"]["limit"];
          linked_partitioning?: components["parameters"]["linked_partitioning"];
        };
      };
      responses: {
        200: components["responses"]["Tracks"];
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/me/favorites/ids": {
    /**
     * Returns user’s favorites ids. (use /me/likes/tracks instead to fetch the authenticated user's likes)
     * @deprecated
     */
    get: {
      parameters: {
        query?: {
          limit?: components["parameters"]["limit"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
        /** @description The user could not be found */
        404: {
          content: never;
        };
      };
    };
  };
  "/me/followings": {
    /** Returns a list of users who are followed by the authenticated user. */
    get: {
      parameters: {
        query?: {
          limit?: components["parameters"]["limit"];
          offset?: components["parameters"]["offset"];
        };
      };
      responses: {
        200: components["responses"]["Users"];
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/me/followings/tracks": {
    /** Returns a list of recent tracks from users followed by the authenticated user. */
    get: {
      parameters: {
        query?: {
          access?: components["parameters"]["access"];
          limit?: components["parameters"]["limit"];
          offset?: components["parameters"]["offset"];
        };
      };
      responses: {
        200: components["responses"]["TracksList"];
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/me/followings/{user_id}": {
    /**
     * Returns a user who is followed by the authenticated user. (use /users/{user_id} instead, to fetch the user details)
     * @deprecated
     */
    get: {
      parameters: {
        path: {
          user_id: components["parameters"]["user_id"];
        };
      };
      responses: {
        200: components["responses"]["User"];
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
    /** Follows a user. */
    put: {
      parameters: {
        path: {
          user_id: components["parameters"]["user_id_to_follow"];
        };
      };
      responses: {
        200: components["responses"]["Successful"];
        201: components["responses"]["User"];
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
    /** Deletes a user who is followed by the authenticated user. */
    delete: {
      parameters: {
        path: {
          user_id: components["parameters"]["user_id_to_follow"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json; charset=utf-8": unknown;
          };
        };
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        422: components["responses"]["UnprocessableEntity"];
      };
    };
  };
  "/me/followers": {
    /** Returns a list of users who are following the authenticated user. */
    get: {
      parameters: {
        query?: {
          limit?: components["parameters"]["limit"];
        };
      };
      responses: {
        200: components["responses"]["Users"];
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/me/followers/{follower_id}": {
    /**
     * Returns a user who is following the authenticated user. (use /users/{user_id} instead, to fetch the user details)
     * @deprecated
     */
    get: {
      parameters: {
        path: {
          follower_id: components["parameters"]["follower_id"];
        };
      };
      responses: {
        200: components["responses"]["User"];
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/me/playlists": {
    /**
     * Returns user’s playlists (sets).
     * @description Returns playlist info, playlist tracks and tracks owner info.
     */
    get: {
      parameters: {
        query?: {
          limit?: components["parameters"]["limit"];
        };
      };
      responses: {
        200: components["responses"]["PlaylistsArray"];
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/me/playlists/{playlist_id}": {
    /**
     * Returns playlist. (use /playlists/{playlist_id} instead, to fetch the playlist details)
     * @deprecated
     */
    get: {
      parameters: {
        path: {
          playlist_id: components["parameters"]["playlist_id"];
        };
      };
      responses: {
        200: components["responses"]["Playlist"];
      };
    };
  };
  "/me/tracks": {
    /** Returns a list of user's tracks. */
    get: {
      parameters: {
        query?: {
          limit?: components["parameters"]["limit"];
          linked_partitioning?: components["parameters"]["linked_partitioning"];
        };
      };
      responses: {
        200: components["responses"]["Tracks"];
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/me/tracks/{track_id}": {
    /**
     * Returns a specified track. (use /tracks/{track_id} instead, to fetch the track details)
     * @deprecated
     */
    get: {
      parameters: {
        path: {
          track_id: components["parameters"]["track_id"];
        };
      };
      responses: {
        200: components["responses"]["Track"];
      };
    };
  };
  "/tracks": {
    /** Performs a track search based on a query */
    get: {
      parameters: {
        query: {
          q: components["parameters"]["q"];
          ids?: components["parameters"]["ids"];
          genres?: components["parameters"]["genres"];
          tags?: components["parameters"]["tags"];
          bpm?: components["parameters"]["bpm"];
          duration?: components["parameters"]["duration"];
          created_at?: components["parameters"]["created_at"];
          access?: components["parameters"]["access"];
          limit?: components["parameters"]["limit"];
          offset?: components["parameters"]["offset"];
          linked_partitioning?: components["parameters"]["linked_partitioning"];
        };
      };
      responses: {
        200: components["responses"]["Tracks"];
        400: components["responses"]["BadRequest"];
        401: components["responses"]["Unauthorized"];
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    /** Uploads a new track. */
    post: {
      requestBody?: {
        content: {
          "multipart/form-data": components["schemas"]["TrackDataRequest"];
          "multipart/x-www-form-urlencoded": components["schemas"]["TrackDataRequest"];
        };
      };
      responses: {
        201: components["responses"]["Track"];
        400: components["responses"]["BadRequest"];
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/playlists": {
    /** Performs a playlist search based on a query */
    get: {
      parameters: {
        query: {
          q: components["parameters"]["q"];
          access?: components["parameters"]["access"];
          limit?: components["parameters"]["limit"];
          offset?: components["parameters"]["offset"];
          linked_partitioning?: components["parameters"]["linked_partitioning"];
        };
      };
      responses: {
        200: components["responses"]["Playlists"];
        400: components["responses"]["BadRequest"];
        401: components["responses"]["Unauthorized"];
      };
    };
    /** Creates a playlist. */
    post: {
      /** @description Create Playlist request */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CreateUpdatePlaylistRequest"];
        };
      };
      responses: {
        201: components["responses"]["LegacyPlaylist"];
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/users": {
    /** Performs a user search based on a query */
    get: {
      parameters: {
        query: {
          q: components["parameters"]["q"];
          ids?: components["parameters"]["ids"];
          limit?: components["parameters"]["limit"];
          offset?: components["parameters"]["offset"];
          linked_partitioning?: components["parameters"]["linked_partitioning"];
        };
      };
      responses: {
        200: components["responses"]["Users"];
        400: components["responses"]["BadRequest"];
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/playlists/{playlist_id}": {
    /** Returns a playlist. */
    get: {
      parameters: {
        query?: {
          secret_token?: components["parameters"]["secret_token"];
          access?: components["parameters"]["access"];
        };
        path: {
          playlist_id: components["parameters"]["playlist_id"];
        };
      };
      responses: {
        200: components["responses"]["Playlist"];
        400: components["responses"]["BadRequest"];
        401: components["responses"]["Unauthorized"];
      };
    };
    /** Updates a playlist. */
    put: {
      parameters: {
        path: {
          playlist_id: components["parameters"]["fake_playlist_id"];
        };
      };
      /** @description Playlist payload */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CreateUpdatePlaylistRequest"];
        };
      };
      responses: {
        200: components["responses"]["LegacyPlaylist"];
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
    /** Deletes a playlist. */
    delete: {
      parameters: {
        path: {
          playlist_id: components["parameters"]["fake_playlist_id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/playlists/{playlist_id}/tracks": {
    /** Returns tracks under a playlist. */
    get: {
      parameters: {
        query?: {
          secret_token?: components["parameters"]["secret_token"];
          access?: components["parameters"]["access"];
          linked_partitioning?: components["parameters"]["linked_partitioning"];
        };
        path: {
          playlist_id: components["parameters"]["playlist_id"];
        };
      };
      responses: {
        200: components["responses"]["Tracks"];
        400: components["responses"]["BadRequest"];
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/playlists/{playlist_id}/reposters": {
    /** Returns a collection of playlist's reposters. */
    get: {
      parameters: {
        query?: {
          limit?: components["parameters"]["limit"];
        };
        path: {
          playlist_id: components["parameters"]["playlist_id"];
        };
      };
      responses: {
        200: components["responses"]["MetaUsers"];
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/tracks/{track_id}": {
    /** Returns a track. */
    get: {
      parameters: {
        query?: {
          secret_token?: components["parameters"]["secret_token"];
        };
        path: {
          track_id: components["parameters"]["track_id"];
        };
      };
      responses: {
        200: components["responses"]["Track"];
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
    /** Updates a track's information. */
    put: {
      parameters: {
        path: {
          track_id: components["parameters"]["track_id"];
        };
      };
      /** @description Track payload */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["TrackMetadataRequest"];
          "multipart/form-data": components["schemas"]["TrackDataRequest"];
          "multipart/x-www-form-urlencoded": components["schemas"]["TrackDataRequest"];
        };
      };
      responses: {
        200: components["responses"]["Track"];
        400: components["responses"]["BadRequest"];
        401: components["responses"]["Unauthorized"];
      };
    };
    /** Deletes a track. */
    delete: {
      parameters: {
        path: {
          track_id: components["parameters"]["track_id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/tracks/{track_id}/streams": {
    /** Returns a track's streamable URLs */
    get: {
      parameters: {
        query?: {
          secret_token?: components["parameters"]["secret_token"];
        };
        path: {
          track_id: components["parameters"]["track_id"];
        };
      };
      responses: {
        200: components["responses"]["Streams"];
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/tracks/{track_id}/comments": {
    /** Returns the comments posted on the track(track_id). */
    get: {
      parameters: {
        query?: {
          limit?: components["parameters"]["limit"];
          offset?: components["parameters"]["offset"];
          linked_partitioning?: components["parameters"]["linked_partitioning"];
        };
        path: {
          track_id: components["parameters"]["track_id"];
        };
      };
      responses: {
        200: components["responses"]["Comments"];
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
    /** Returns the newly created comment on success */
    post: {
      parameters: {
        path: {
          track_id: components["parameters"]["track_id"];
        };
      };
      /** @description Body of a comment */
      requestBody: {
        content: {
          "application/json; charset=utf-8": {
            comment?: {
              /**
               * @description Comment's content
               * @example test comment
               */
              body: string;
              /** @description Timestamp of a comment. String or float representation is supported */
              timestamp?: string | number;
            };
          };
        };
      };
      responses: {
        201: components["responses"]["Comment"];
        422: components["responses"]["UnprocessableEntity"];
        429: components["responses"]["TooManyRequests"];
      };
    };
  };
  "/tracks/{track_id}/favoriters": {
    /** Returns a list of users who have favorited or liked the track. */
    get: {
      parameters: {
        query?: {
          limit?: components["parameters"]["limit"];
          offset?: components["parameters"]["offset"];
        };
        path: {
          track_id: components["parameters"]["track_id"];
        };
      };
      responses: {
        200: components["responses"]["UsersList"];
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/tracks/{track_id}/reposters": {
    /** Returns a collection of track's reposters. */
    get: {
      parameters: {
        query?: {
          limit?: components["parameters"]["limit"];
        };
        path: {
          track_id: components["parameters"]["track_id"];
        };
      };
      responses: {
        200: components["responses"]["MetaUsers"];
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/tracks/{track_id}/related": {
    /** Returns all related tracks of track on SoundCloud. */
    get: {
      parameters: {
        query?: {
          access?: components["parameters"]["access"];
          limit?: components["parameters"]["limit"];
          offset?: components["parameters"]["offset"];
          linked_partitioning?: components["parameters"]["linked_partitioning"];
        };
        path: {
          track_id: components["parameters"]["track_id"];
        };
      };
      responses: {
        200: components["responses"]["Tracks"];
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/resolve": {
    /** Resolves soundcloud.com URLs to Resource URLs to use with the API. */
    get: {
      parameters: {
        query: {
          url: components["parameters"]["url"];
        };
      };
      responses: {
        302: components["responses"]["Found"];
      };
    };
  };
  "/users/{user_id}": {
    /** Returns a user. */
    get: {
      parameters: {
        path: {
          user_id: components["parameters"]["user_id"];
        };
      };
      responses: {
        200: components["responses"]["CompleteUser"];
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/users/{user_id}/comments": {
    /** Returns a list of user's comments. */
    get: {
      parameters: {
        query?: {
          limit?: components["parameters"]["limit"];
          offset?: components["parameters"]["offset"];
        };
        path: {
          user_id: components["parameters"]["user_id"];
        };
      };
      responses: {
        200: components["responses"]["CommentsList"];
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/users/{user_id}/favorites": {
    /**
     * Returns a list of user's favorited or liked tracks. (use /users/:userId/likes/tracks instead, to fetch a user's likes)
     * @deprecated
     */
    get: {
      parameters: {
        query?: {
          limit?: components["parameters"]["limit"];
          linked_partitioning?: components["parameters"]["linked_partitioning"];
        };
        path: {
          user_id: components["parameters"]["user_id"];
        };
      };
      responses: {
        200: components["responses"]["Tracks"];
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/users/{user_id}/followers": {
    /**
     * Returns a list of user’s followers.
     * @description Returns a list of users that follows (user_id).
     */
    get: {
      parameters: {
        query?: {
          limit?: components["parameters"]["limit"];
        };
        path: {
          user_id: components["parameters"]["user_id"];
        };
      };
      responses: {
        200: components["responses"]["Users"];
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/users/{user_id}/followings": {
    /**
     * Returns a list of user’s followings.
     * @description Returns list of users that (user_id) follows.
     */
    get: {
      parameters: {
        query?: {
          limit?: components["parameters"]["limit"];
        };
        path: {
          user_id: components["parameters"]["user_id"];
        };
      };
      responses: {
        200: components["responses"]["Users"];
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/users/{user_id}/followings/{following_id}": {
    /**
     * Returns a user's following. (use /users/{user_id} instead, to fetch the user details)
     * @deprecated
     * @description Returns (following_id) that is followed by (user_id).
     */
    get: {
      parameters: {
        path: {
          user_id: components["parameters"]["user_id"];
          following_id: components["parameters"]["following_id"];
        };
      };
      responses: {
        200: components["responses"]["CompleteUser"];
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/users/{user_id}/playlists": {
    /** Returns a list of user's playlists. */
    get: {
      parameters: {
        query?: {
          access?: components["parameters"]["access"];
          limit?: components["parameters"]["limit"];
          linked_partitioning?: components["parameters"]["linked_partitioning"];
        };
        path: {
          user_id: components["parameters"]["user_id"];
        };
      };
      responses: {
        200: components["responses"]["Playlists"];
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/users/{user_id}/tracks": {
    /** Returns a list of user's tracks. */
    get: {
      parameters: {
        query?: {
          access?: components["parameters"]["access"];
          limit?: components["parameters"]["limit"];
          linked_partitioning?: components["parameters"]["linked_partitioning"];
        };
        path: {
          user_id: components["parameters"]["user_id"];
        };
      };
      responses: {
        200: components["responses"]["Tracks"];
        401: components["responses"]["Unauthorized"];
      };
    };
  };
  "/users/{user_id}/web-profiles": {
    /** Returns list of user's links added to their profile (website, facebook, instagram). */
    get: {
      parameters: {
        query?: {
          limit?: components["parameters"]["limit"];
        };
        path: {
          user_id: components["parameters"]["user_id"];
        };
      };
      responses: {
        200: components["responses"]["WebProfiles"];
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/users/{user_id}/likes/tracks": {
    /** Returns a list of user's liked tracks. */
    get: {
      parameters: {
        query?: {
          access?: components["parameters"]["access"];
          limit?: components["parameters"]["limit"];
          linked_partitioning?: components["parameters"]["linked_partitioning"];
        };
        path: {
          user_id: components["parameters"]["user_id"];
        };
      };
      responses: {
        200: components["responses"]["Tracks"];
        400: components["responses"]["BadRequest"];
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/likes/tracks/{track_id}": {
    /** Likes a track. */
    post: {
      parameters: {
        path: {
          track_id: components["parameters"]["test_track_id"];
        };
      };
      responses: {
        200: components["responses"]["Success"];
        400: components["responses"]["BadRequest"];
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        429: components["responses"]["TooManyRequests"];
      };
    };
    /** Unlikes a track. */
    delete: {
      parameters: {
        path: {
          track_id: components["parameters"]["test_track_id"];
        };
      };
      responses: {
        200: components["responses"]["Success"];
        400: components["responses"]["BadRequest"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/likes/playlists/{playlist_id}": {
    /** Likes a playlist. */
    post: {
      parameters: {
        path: {
          playlist_id: components["parameters"]["playlist_id"];
        };
      };
      responses: {
        200: components["responses"]["Success"];
        201: components["responses"]["Created"];
        400: components["responses"]["BadRequest"];
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        429: components["responses"]["TooManyRequests"];
      };
    };
    /** Unlikes a playlist. */
    delete: {
      parameters: {
        path: {
          playlist_id: components["parameters"]["playlist_id"];
        };
      };
      responses: {
        200: components["responses"]["Success"];
        400: components["responses"]["BadRequest"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/reposts/tracks/{track_id}": {
    /** Reposts a track as the authenticated user */
    post: {
      parameters: {
        path: {
          track_id: components["parameters"]["test_track_id"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
    /** Removes a repost on a track as the authenticated user */
    delete: {
      parameters: {
        path: {
          track_id: components["parameters"]["test_track_id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/reposts/playlists/{playlist_id}": {
    /** Reposts a playlist as the authenticated user */
    post: {
      parameters: {
        path: {
          playlist_id: components["parameters"]["repost_playlist_id"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
    /** Removes a repost on a playlist as the authenticated user */
    delete: {
      parameters: {
        path: {
          playlist_id: components["parameters"]["repost_playlist_id"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
        401: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AuthorizationCode: {
      /** @enum {string} */
      grant_type?: "authorization_code" | "client_credentials";
      /** @description Authorization code */
      authorization_code?: string;
      /** @description Client ID */
      client_id?: string;
      /** @description Redirect URI */
      redirect_uri?: string;
      /** @description Client secret */
      client_secret?: string;
    };
    RefreshToken: {
      /** @enum {string} */
      grant_type?: "refresh_token";
      /** @description Refresh token */
      refresh_token?: string;
      /** @description Client ID */
      client_id?: string;
      /** @description Redirect URI */
      redirect_uri?: string;
      /** @description Client secret */
      client_secret?: string;
    };
    /** @deprecated */
    Password: {
      /** @enum {string} */
      grant_type?: "password";
      /** @description User name */
      user_name?: string;
      /** @description User password */
      password?: string;
      /** @description Client ID */
      client_id?: string;
      /** @description Redirect URI */
      redirect_uri?: string;
      /** @description Client secret */
      client_secret?: string;
    };
    Connection: {
      /** @description Created timestamp. */
      created_at?: string;
      /** @description Full Name. */
      display_name?: string;
      /** @description Unique identifier */
      id?: number;
      /** @description Kind of resource. */
      kind?: string;
      /** @deprecated */
      post_favorite?: boolean;
      /** @deprecated */
      post_publish?: boolean;
      /** @description Service. */
      service?: string;
      /** @description Type. */
      type?: string;
      /** @description The external link URI. */
      uri?: string;
    };
    Connections: components["schemas"]["Connection"][];
    TrackMetadataRequest: {
      track?: {
        title?: string;
        permalink?: string;
        /**
         * @default public
         * @enum {string}
         */
        sharing?: "public" | "private";
        /**
         * @description who can embed this track "all", "me", or "none"
         * @enum {string}
         */
        embeddable_by?: "all" | "me" | "none";
        purchase_url?: string;
        description?: string;
        genre?: string;
        /** @description The tag_list property contains a list of tags separated by spaces. Multiword tags are quoted in double quotes. We also support machine tags that follow the pattern NAMESPACE:KEY=VALUE. For example: geo:lat=43.555 camel:size=medium “machine:tag=with space” Machine tags are not revealed to the user on the track pages. */
        tag_list?: string;
        label_name?: string;
        release?: string;
        /**
         * write only!
         * @description string, formatted as yyyy-mm-dd, representing release date
         */
        release_date?: string;
        /** @default true */
        streamable?: boolean;
        /** @default true */
        downloadable?: boolean;
        /**
         * @description Possible values: no-rights-reserved, all-rights-reserved, cc-by, cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa
         * @enum {string}
         */
        license?: "no-rights-reserved" | "all-rights-reserved" | "cc-by" | "cc-by-nc" | "cc-by-nd" | "cc-by-sa" | "cc-by-nc-nd" | "cc-by-nc-sa";
        /** @default true */
        commentable?: boolean;
        isrc?: string;
      };
    };
    CreateUpdatePlaylistRequest: {
      playlist?: {
        /** @description Title of the playlist */
        title?: string;
        /** @description Description of the playlist */
        description?: string;
        /**
         * @description public or private
         * @enum {string}
         */
        sharing?: "public" | "private";
        /** @description List of tracks to add to playlist */
        tracks?: {
            /** @description SoundCloud track id */
            id: string;
          }[];
      };
    };
    TrackDataRequest: {
      "track[title]"?: string;
      /**
       * Only for uploading
       * Format: binary
       */
      "track[asset_data]"?: string;
      "track[permalink]"?: string;
      /**
       * @default public
       * @enum {string}
       */
      "track[sharing]"?: "public" | "private";
      /**
       * @description who can embed this track "all", "me", or "none"
       * @enum {string}
       */
      "track[embeddable_by]"?: "all" | "me" | "none";
      "track[purchase_url]"?: string;
      "track[description]"?: string;
      "track[genre]"?: string;
      /** @description The tag_list property contains a list of tags separated by spaces. Multiword tags are quoted in double quotes. We also support machine tags that follow the pattern NAMESPACE:KEY=VALUE. For example: geo:lat=43.555 camel:size=medium “machine:tag=with space” Machine tags are not revealed to the user on the track pages. */
      "track[tag_list]"?: string;
      "track[label_name]"?: string;
      "track[release]"?: string;
      /**
       * write only!
       * @description string, formatted as yyyy-mm-dd, representing release date
       */
      "track[release_date]"?: string;
      /** @default true */
      "track[streamable]"?: boolean;
      /** @default true */
      "track[downloadable]"?: boolean;
      /**
       * @description Possible values: no-rights-reserved, all-rights-reserved, cc-by, cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa
       * @enum {string}
       */
      "track[license]"?: "no-rights-reserved" | "all-rights-reserved" | "cc-by" | "cc-by-nc" | "cc-by-nd" | "cc-by-sa" | "cc-by-nc-nd" | "cc-by-nc-sa";
      /** @default true */
      "track[commentable]"?: boolean;
      "track[isrc]"?: string;
      /**
       * Only for uploading, for PRO users
       * Format: binary
       */
      "track[artwork_data]"?: string;
    };
    Found: {
      /** @description Status code. */
      status?: string;
      /** @description Location URL of the resource. */
      location?: string;
    };
    Error: {
      code?: number;
      message?: string;
      link?: string;
      /** @deprecated */
      error?: string | null;
      /** @deprecated */
      errors?: unknown[];
      /** @deprecated */
      status?: string;
    };
    TooManyRequests: components["schemas"]["Error"] & {
      spam_warning_urn?: string;
    };
    /** @description SoundCloud User object */
    User: {
      /** @description URL to a JPEG image */
      avatar_url?: string;
      /** @description city */
      city?: string;
      /** @description country */
      country?: string;
      /** @description description */
      description?: string;
      /** @description discogs name */
      discogs_name?: string;
      /** @description first name */
      first_name?: string;
      /** @description number of followers */
      followers_count?: number;
      /** @description number of followed users */
      followings_count?: number;
      /** @description first and last name */
      full_name?: string;
      /** @description unique identifier */
      id?: number;
      /** @description kind of resource */
      kind?: string;
      /**
       * Format: date-time
       * @description profile creation datetime
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description last modified datetime
       */
      last_modified?: string;
      /** @description last name */
      last_name?: string;
      /**
       * @deprecated
       * @description myspace name
       */
      myspace_name?: string;
      /** @description permalink of the resource */
      permalink?: string;
      /** @description URL to the SoundCloud.com page */
      permalink_url?: string;
      /** @description subscription plan of the user */
      plan?: string;
      /** @description number of public playlists */
      playlist_count?: number;
      /** @description number of favorited public tracks */
      public_favorites_count?: number;
      /** @description number of reposts from user */
      reposts_count?: number;
      /** @description number of public tracks */
      track_count?: number;
      /** @description API resource URL */
      uri?: string;
      /** @description username */
      username?: string;
      /** @description a URL to the website */
      website?: string;
      /** @description a custom title for the website */
      website_title?: string;
      /**
       * @deprecated
       * @description a list subscriptions associated with the user
       */
      subscriptions?: unknown;
    };
    /** @description SoundCloud User object. */
    MetaUser: {
      /** @description URL to a JPEG image */
      avatar_url?: string;
      /** @description unique identifier */
      id?: number;
      /** @description kind of resource */
      kind?: string;
      /**
       * Format: date-time
       * @description profile creation datetime
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description last modified datetime
       */
      last_modified?: string;
      /** @description permalink of the resource */
      permalink?: string;
      /** @description URL to the SoundCloud.com page */
      permalink_url?: string;
      /** @description API resource URL */
      uri?: string;
      /** @description username */
      username?: string;
    } | null;
    /** @description SoundCloud Complete User object */
    CompleteUser: {
      /** @description URL to a JPEG image. */
      avatar_url?: string;
      /** @description city. */
      city?: string;
      /** @description country. */
      country?: string;
      /** @description description. */
      description?: string;
      /** @description discogs name. */
      discogs_name?: string;
      /** @description first name. */
      first_name?: string;
      /** @description number of followers. */
      followers_count?: number;
      /** @description number of followed users. */
      followings_count?: number;
      /** @description first and last name. */
      full_name?: string;
      /** @description unique identifier */
      id?: number;
      /** @description kind of resource. */
      kind?: string;
      /** @description last modified timestamp. */
      last_modified?: string;
      /** @description last name. */
      last_name?: string;
      /** @description locale. */
      locale?: string;
      /**
       * @deprecated
       * @description myspace name
       */
      myspace_name?: string;
      /** @description permalink of the resource. */
      permalink?: string;
      /** @description URL to the SoundCloud.com page. */
      permalink_url?: string;
      /** @description subscription plan of the user. */
      plan?: string;
      /** @description number of public playlists. */
      playlist_count?: number;
      /** @description boolean if email is confirmed. */
      primary_email_confirmed?: boolean;
      /** @description number of private playlists. */
      private_playlists_count?: number;
      /** @description number of private tracks. */
      private_tracks_count?: number;
      /** @description number of favorited public tracks */
      public_favorites_count?: number;
      /** @description user's upload quota */
      quota?: {
        /** @description unlimited upload quota. */
        unlimited_upload_quota?: boolean;
        /** @description upload seconds used. */
        upload_seconds_used?: number;
      };
      /** @description number of reposts from user */
      reposts_count?: number;
      /** @description a list subscriptions associated with the user */
      subscriptions?: unknown;
      /** @description number of public tracks. */
      track_count?: number;
      /** @description API resource URL. */
      uri?: string;
      /** @description username */
      username?: string;
      /** @description a URL to the website. */
      website?: string;
      /** @description a custom title for the website. */
      website_title?: string;
    };
    Users: {
      collection?: components["schemas"]["User"][];
      next_href?: string;
    };
    MetaUsers: {
      collection?: components["schemas"]["MetaUser"][];
      next_href?: string;
    };
    /** @deprecated */
    UsersList: {
        /** @description URL to a JPEG image */
        avatar_url?: string;
        /** @description city */
        city?: string;
        /** @description country */
        country?: string;
        /** @description description */
        description?: string;
        /** @description discogs name */
        discogs_name?: string;
        /** @description first name */
        first_name?: string;
        /** @description number of followers */
        followers_count?: number;
        /** @description number of followed users */
        followings_count?: number;
        /** @description first and last name */
        full_name?: string;
        /** @description unique identifier */
        id?: number;
        /** @description kind of resource */
        kind?: string;
        /**
         * Format: date-time
         * @description last modified datetime
         */
        last_modified?: string;
        /** @description last name */
        last_name?: string;
        /**
         * @deprecated
         * @description myspace name
         */
        myspace_name?: string;
        /** @description permalink of the resource */
        permalink?: string;
        /** @description URL to the SoundCloud.com page */
        permalink_url?: string;
        /** @description subscription plan of the user */
        plan?: string;
        /** @description number of public playlists */
        playlist_count?: number;
        /** @description number of favorited public tracks */
        public_favorites_count?: number;
        /** @description number of reposts from user */
        reposts_count?: number;
        /** @description number of public tracks */
        track_count?: number;
        /** @description API resource URL */
        uri?: string;
        /** @description username */
        username?: string;
        /** @description a URL to the website */
        website?: string;
        /** @description a custom title for the website */
        website_title?: string;
        /**
         * @deprecated
         * @description a list subscriptions associated with the user
         */
        subscriptions?: unknown;
      }[];
    /** @description Soundcloud Track object. */
    Track: {
      /** @description Track title. */
      title?: string;
      /** @description URL to a JPEG image. */
      artwork_url?: string;
      /** @description Tempo. */
      bpm?: number;
      /** @description Number of comments. */
      comment_count?: number;
      /** @description Is commentable. */
      commentable?: boolean;
      /** @description Created timestamp. */
      created_at?: string;
      /** @description Track description. */
      description?: string;
      /** @description NUmber of downloads. */
      download_count?: number;
      /** @description Is downloadable. */
      downloadable?: string;
      /** @description Track duration. */
      duration?: number;
      /**
       * @deprecated
       * @description Embeddable by.
       */
      embeddable_by?: string;
      /** @description Number of favoritings. */
      favoritings_count?: number;
      /** @description Genre */
      genre?: string;
      /** @description Track identifier. */
      id?: number;
      /** @description ISRC code. */
      isrc?: string;
      /** @description Key signature. */
      key_signature?: string;
      /** @description Type of object (track). */
      kind?: string;
      /** @description Label user name. */
      label_name?: string;
      /** @description License */
      license?: string;
      /** @description Permalink URL. */
      permalink_url?: string;
      /** @description Number of plays. */
      playback_count?: number;
      /** @description Purchase title. */
      purchase_title?: string;
      /** @description Purchase URL. */
      purchase_url?: string;
      /** @description Release. */
      release?: string;
      /** @description Day of release. */
      release_day?: number;
      /** @description Month of release. */
      release_month?: number;
      /** @description Year of release. */
      release_year?: number;
      /** @description Type of sharing (public/private). */
      sharing?: string;
      /** @description URL to stream. */
      stream_url?: string;
      /** @description Is streamable. */
      streamable?: boolean;
      /** @description Tags. */
      tag_list?: string;
      /** @description Track URI. */
      uri?: string;
      /** @description User who uploaded a track */
      user?: components["schemas"]["MetaUser"];
      /** @description Is user's favourite. */
      user_favorite?: boolean;
      /** @description Number of plays by a user. */
      user_playback_count?: number;
      /** @description Waveform URL. */
      waveform_url?: string;
      /** @description List of countries where track is available. */
      available_country_codes?: string;
      /**
       * @description Level of access the user (logged in or anonymous) has to the track.
       *   * `playable` - user is allowed to listen to a full track.
       *   * `preview` - user is allowed to preview a track, meaning a snippet is available
       *   * `blocked` - user can only see the metadata of a track, no streaming is possible
       *
       * @enum {string|null}
       */
      access?: "playable" | "preview" | "blocked" | null;
      /** @description URL to download a track. */
      download_url?: string;
      /** @description Number of reposts. */
      reposts_count?: number;
      /** @description Secret URL. */
      secret_uri?: string;
    };
    Tracks: {
      collection?: components["schemas"]["Track"][];
      next_href?: string;
    };
    /** @deprecated */
    TracksList: components["schemas"]["Track"][];
    /** @description Soundcloud Playlist Object */
    Playlist: {
      /** @description Playlist title. */
      title?: string;
      /** @description Playlist identifier. */
      id?: number;
      /** @description Type of Soundcloud object (playlist). */
      kind?: string;
      /** @description URL to a JPEG image. */
      artwork_url?: string;
      /** @description Created timestamp. */
      created_at?: string;
      /** @description Playlist description. */
      description?: string;
      /** @description is downloadable. */
      downloadable?: boolean;
      /** @description Playlist duration. */
      duration?: number;
      /** @description European Article Number. */
      ean?: string;
      /** @description Embeddable by. */
      embeddable_by?: string;
      /** @description Playlist genre. */
      genre?: string;
      /** @description Label user identifier. */
      label_id?: number;
      /** @description Label name. */
      label_name?: string;
      /** @description Last modified timestamp. */
      last_modified?: string;
      /** @description License. */
      license?: string;
      /** @description Playlist permalink. */
      permalink?: string;
      /** @description Playlist permalink URL. */
      permalink_url?: string;
      /** @description Type of playlist. */
      playlist_type?: string;
      /** @description Purchase title. */
      purchase_title?: string;
      /** @description Purchase URL. */
      purchase_url?: string;
      /** @description Release. */
      release?: string;
      /** @description Day of release. */
      release_day?: number;
      /** @description Month of release. */
      release_month?: number;
      /** @description Year of release. */
      release_year?: number;
      /** @description Type of sharing (private/public). */
      sharing?: string;
      /** @description Is streamable. */
      streamable?: boolean;
      /** @description Tags. */
      tag_list?: string;
      /** @description Count of tracks. */
      track_count?: number;
      /** @description List of tracks. */
      tracks?: components["schemas"]["Track"][];
      /** @description Playlist type. */
      type?: string;
      /** @description Playlist URI. */
      uri?: string;
      user?: components["schemas"]["MetaUser"];
      /** @description User identifier. */
      user_id?: number;
      /** @description Count of playlist likes. */
      likes_count?: number;
      label?: components["schemas"]["MetaUser"];
      /** @description tracks URI. */
      tracks_uri?: string | null;
      /** @description Tags. */
      tags?: string | null;
    };
    Playlists: {
      collection?: components["schemas"]["Playlist"][];
      next_href?: string;
    };
    /** @deprecated */
    PlaylistsArray: components["schemas"]["Playlist"][];
    /** @description User's activities. */
    Activities: {
      collection?: ({
          /** @description Type of activity (track). */
          type?: string;
          /** @description Created timestamp. */
          created_at?: string;
          /** @description Origin. */
          origin?: components["schemas"]["Track"] | components["schemas"]["Playlist"];
        })[];
      next_href?: string;
      future_href?: string;
    };
    /** @description User's links added to their profile */
    WebProfiles: {
        /** @description Timestamp of when the link was added to the profile. */
        created_at?: string;
        /** @description Id */
        id?: number;
        /** @description Kind */
        kind?: string;
        /** @description Service or platform */
        service?: string;
        /** @description Link's title */
        title?: string;
        /** @description URL of the external link */
        url?: string;
        /** @description Username extracted from the external link */
        username?: string;
      }[];
    /** @description User's Comment */
    Comment: {
      /** @description Comment body. */
      body?: string;
      /** @description Created timestamp. */
      created_at?: string;
      /** @description Identifier. */
      id?: number;
      /** @description Kind (comment). */
      kind?: string;
      /** @description User's identifier. */
      user_id?: number;
      /** @description Timestamp. */
      timestamp?: string;
      /** @description Track's identifier. */
      track_id?: number;
      /** @description Comment's URL. */
      uri?: string;
      /** @description SoundCloud User object */
      user?: {
        /** @description unique identifier */
        id?: number;
        /** @description kind of resource. */
        kind?: string;
        /** @description permalink of the resource. */
        permalink?: string;
        /** @description username */
        username?: string;
        /** @description last modified timestamp. */
        last_modified?: string;
        /** @description API resource URL. */
        uri?: string;
        /** @description URL to the SoundCloud.com page. */
        permalink_url?: string;
        /** @description URL to a JPEG image. */
        avatar_url?: string;
        /** @description number of followers. */
        followers_count?: number;
        /** @description number of followed users. */
        followings_count?: number;
        /** @description number of reposts from user */
        reposts_count?: number;
      };
    };
    Comments: {
      collection?: components["schemas"]["Comment"][];
      next_href?: string | null;
    };
    /** @deprecated */
    CommentsList: components["schemas"]["Comment"][];
    Streams: {
      http_mp3_128_url?: string;
      hls_mp3_128_url?: string;
      hls_opus_64_url?: string;
      preview_mp3_128_url?: string;
    };
  };
  responses: {
    /** @description Success */
    Success: {
      content: {
        "application/json; charset=utf-8": unknown;
      };
    };
    /** @description Success */
    Successful: {
      content: {
        "application/json; charset=utf-8": unknown;
      };
    };
    /** @description Accepted */
    Accepted: {
      content: {
        "application/json; charset=utf-8": unknown;
      };
    };
    /** @description Found */
    Found: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["Found"];
      };
    };
    /** @description Found */
    FoundHtml: {
      content: {
        "application/json; charset=utf-8": string;
      };
    };
    /** @description Created */
    Created: {
      content: {
        "application/json; charset=utf-8": unknown;
      };
    };
    /** @description Bad Request */
    BadRequest: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["Error"];
      };
    };
    /** @description Unauthorized */
    Unauthorized: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["Error"];
      };
    };
    /** @description Forbidden */
    Forbidden: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Not Found */
    NotFound: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Unprocessable Entity */
    UnprocessableEntity: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Too Many Requests */
    TooManyRequests: {
      content: {
        "application/json": components["schemas"]["TooManyRequests"];
      };
    };
    /** @description Success */
    Connection: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["Connection"];
      };
    };
    /** @description Success */
    Connections: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["Connections"];
      };
    };
    /** @description Success */
    User: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["User"];
      };
    };
    /** @description Success */
    MetaUser: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["MetaUser"];
      };
    };
    /** @description Success */
    CompleteUser: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CompleteUser"];
      };
    };
    /** @description Success */
    Users: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["Users"] | components["schemas"]["UsersList"];
      };
    };
    /** @description Success */
    UsersList: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["UsersList"];
      };
    };
    /** @description Success */
    MetaUsers: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["MetaUsers"];
      };
    };
    /** @description Success */
    Track: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["Track"];
      };
    };
    /** @description Success */
    Tracks: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["Tracks"] | components["schemas"]["TracksList"];
      };
    };
    /** @description Success */
    TracksList: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["TracksList"];
      };
    };
    /** @description Success */
    Playlist: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["Playlist"];
      };
    };
    /** @description Success */
    LegacyPlaylist: {
      content: {
        "application/json; charset=utf-8": {
          /** @description Playlist title. */
          title?: string;
          /** @description Playlist identifier. */
          id?: number;
          /** @description Type of Soundcloud object (playlist). */
          kind?: string;
          /** @description URL to a JPEG image. */
          artwork_url?: string;
          /** @description Created timestamp. */
          created_at?: string;
          /** @description Playlist description. */
          description?: string;
          /** @description is downloadable. */
          downloadable?: boolean;
          /** @description Playlist duration. */
          duration?: number;
          /** @description European Article Number. */
          ean?: string;
          /** @description Embeddable by. */
          embeddable_by?: string;
          /** @description Playlist genre. */
          genre?: string;
          /** @description Label user identifier. */
          label_id?: number;
          /** @description Label name. */
          label_name?: string;
          /** @description Last modified timestamp. */
          last_modified?: string;
          /** @description License. */
          license?: string;
          /** @description Playlist permalink. */
          permalink?: string;
          /** @description Playlist permalink URL. */
          permalink_url?: string;
          /** @description Type of playlist. */
          playlist_type?: string;
          /** @description Purchase title. */
          purchase_title?: string;
          /** @description Purchase URL. */
          purchase_url?: string;
          /** @description Release. */
          release?: string;
          /** @description Day of release. */
          release_day?: number;
          /** @description Month of release. */
          release_month?: number;
          /** @description Year of release. */
          release_year?: number;
          /** @description Type of sharing (private/public). */
          sharing?: string;
          /** @description Is streamable. */
          streamable?: boolean;
          /** @description Tags. */
          tag_list?: string;
          /** @description Count of tracks. */
          track_count?: number;
          /** @description List of tracks. */
          tracks?: {
              /** @description Track title. */
              title?: string;
              /** @description URL to a JPEG image. */
              artwork_url?: string;
              /** @description Tempo. */
              bpm?: number;
              /** @description Number of comments. */
              comment_count?: number;
              /** @description Is commentable. */
              commentable?: boolean;
              /** @description Created timestamp. */
              created_at?: string;
              /** @description Track description. */
              description?: string;
              /** @description NUmber of downloads. */
              download_count?: number;
              /** @description Is downloadable. */
              downloadable?: string;
              /** @description Track duration. */
              duration?: number;
              /**
               * @deprecated
               * @description Embeddable by.
               */
              embeddable_by?: string;
              /** @description Number of favoritings. */
              favoritings_count?: number;
              /** @description Genre */
              genre?: string;
              /** @description Track identifier. */
              id?: number;
              /** @description ISRC code. */
              isrc?: string;
              /** @description Key signature. */
              key_signature?: string;
              /** @description Type of object (track). */
              kind?: string;
              /** @description Label user name. */
              label_name?: string;
              /** @description License */
              license?: string;
              /** @description Permalink URL. */
              permalink_url?: string;
              /** @description Number of plays. */
              playback_count?: number;
              /** @description Purchase title. */
              purchase_title?: string;
              /** @description Purchase URL. */
              purchase_url?: string;
              /** @description Release. */
              release?: string;
              /** @description Day of release. */
              release_day?: number;
              /** @description Month of release. */
              release_month?: number;
              /** @description Year of release. */
              release_year?: number;
              /** @description Type of sharing (public/private). */
              sharing?: string;
              /** @description URL to stream. */
              stream_url?: string;
              /** @description Is streamable. */
              streamable?: boolean;
              /** @description Tags. */
              tag_list?: string;
              /** @description Track URI. */
              uri?: string;
              /** @description User who uploaded a track */
              user?: components["schemas"]["MetaUser"];
              /** @description Is user's favourite. */
              user_favorite?: boolean;
              /** @description Number of plays by a user. */
              user_playback_count?: number;
              /** @description Waveform URL. */
              waveform_url?: string;
            }[];
          /** @description Playlist type. */
          type?: string;
          /** @description Playlist URI. */
          uri?: string;
          user?: components["schemas"]["MetaUser"];
          /** @description User identifier. */
          user_id?: number;
        };
      };
    };
    /** @description Success */
    Playlists: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["Playlists"] | components["schemas"]["PlaylistsArray"];
      };
    };
    /** @description Success */
    PlaylistsArray: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["PlaylistsArray"];
      };
    };
    /** @description Success */
    Activities: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["Activities"];
      };
    };
    /** @description Success */
    WebProfiles: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["WebProfiles"];
      };
    };
    /** @description Success */
    Comment: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["Comment"];
      };
    };
    /** @description Success */
    Comments: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["Comments"] | components["schemas"]["CommentsList"];
      };
    };
    /** @description Success */
    CommentsList: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CommentsList"];
      };
    };
    /** @description Success */
    Streams: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["Streams"];
      };
    };
  };
  parameters: {
    /** @description Return tracks with a specified bpm[from], bpm[to] */
    bpm?: {
      /**
       * @description Return tracks with at least this bpm value
       * @example 123
       */
      from?: number;
      /**
       * @description Return tracks with at most this bpm value
       * @example 456
       */
      to?: number;
    };
    /**
     * @description The client id belonging to your application
     * @example some client
     */
    client_id: string;
    /** @description (yyyy-mm-dd hh:mm:ss) return tracks created within the specified dates */
    created_at?: {
      /**
       * @description (yyyy-mm-dd hh:mm:ss) return tracks created at this date or later
       * @example 2020-12-24T00:00:00.000Z
       */
      from?: string;
      /**
       * @description (yyyy-mm-dd hh:mm:ss) return tracks created at this date or earlier
       * @example 2020-12-26T00:00:00.000Z
       */
      to?: string;
    };
    /** @description Return tracks within a specified duration range */
    duration?: {
      /**
       * @description Return tracks with at least this duration value
       * @example 123456
       */
      from?: number;
      /**
       * @description Return tracks with at most this duration value
       * @example 456789
       */
      to?: number;
    };
    /**
     * @description A comma separated list of genres
     * @example Pop,House
     */
    genres?: string;
    /**
     * @description A comma separated list of track ids to filter on
     * @example 1,2,3
     */
    ids?: string;
    /**
     * @description Number of results to return in the collection.
     * @example 2
     */
    limit?: number;
    /**
     * @deprecated
     * @description Offset of first result. Deprecated, use `linked_partitioning` instead.
     * @example 0
     */
    offset?: number;
    /**
     * @description search
     * @example hello
     */
    q: string;
    /**
     * @description The redirect uri you have configured for your application
     * @example https://soundcloud.com
     */
    redirect_uri: string;
    /**
     * @description It's recommended to use "code" here
     * @example code
     */
    response_type: "code" | "token" | "code_and_token";
    /**
     * @description Scope
     * @example default
     */
    scope: string;
    /**
     * @description Any value included here will be appended to the redirect URI. Use this for CSRF protection.
     * @example encrypted_session_info
     */
    state?: string;
    /**
     * @description A comma separated list of tags
     * @example test
     */
    tags?: string;
    /**
     * @description SoundCloud URL
     * @example https://soundcloud.com/user-434241656
     */
    url: string;
    /**
     * @description Returns paginated collection of items (recommended, returning a list without pagination is deprecated and should not be used)
     * @example true
     */
    linked_partitioning?: boolean;
    /** @description A secret token to fetch private playlists/tracks */
    secret_token?: string;
    /** @description Filters content by level of access the user (logged in or anonymous) has to the track. The result list will include only tracks with the specified access. Include all options if you'd like to see all possible tracks. See `Track#access` schema for more details. */
    access?: ("playable" | "preview" | "blocked")[];
    /**
     * @description SoundCloud comment id
     * @example 123456
     */
    comment_id: number;
    /**
     * @description SoundCloud connection id
     * @example 123456
     */
    connection_id: number;
    /**
     * @description SoundCloud User id to denote a Follower
     * @example 743372812
     */
    follower_id: number;
    /**
     * @description SoundCloud User id to denote a Following of a user
     * @example 25219981
     */
    following_id: number;
    /**
     * @description SoundCloud playlist id
     * @example 1212781357
     */
    playlist_id: number;
    /**
     * @description SoundCloud playlist id
     * @example 10
     */
    fake_playlist_id: number;
    /**
     * @description SoundCloud playlist id
     * @example 1205584273
     */
    repost_playlist_id: number;
    /**
     * @description tag
     * @example some tag
     */
    tag: string;
    /**
     * @description SoundCloud Track id
     * @example 308946187
     */
    track_id: number;
    /**
     * @description SoundCloud Track id
     * @example 1015448728
     */
    test_track_id: number;
    /**
     * @description SoundCloud User id
     * @example 948745750
     */
    user_id: number;
    /**
     * @description SoundCloud User id
     * @example 743372812
     */
    user_id_to_follow: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
